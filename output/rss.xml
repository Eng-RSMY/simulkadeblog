<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>SIMULKADE</title><link>http://simulkade.com/</link><description>A cozy kade for simulation</description><atom:link href="http://simulkade.com/rss.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Wed, 01 Apr 2015 08:04:15 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>JFVM: a finite volume tool for Julia</title><link>http://simulkade.com/posts/jfvm-a-finite-volume-tool-for-julia.html</link><dc:creator>AAE</dc:creator><description>&lt;div tabindex="-1" id="notebook" class="border-box-sizing"&gt;
    &lt;div class="container" id="notebook-container"&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;During the Christmass holydays, I spent some time to convert my Matlab &lt;a href="https://github.com/simulkade/FVTool"&gt;FVTool&lt;/a&gt; to a &lt;a href="http://pkg.julialang.org/"&gt;Julia package&lt;/a&gt;. The result, which I call &lt;a href="https://github.com/simulkade/JFVM.jl"&gt;JFVM&lt;/a&gt; is a bit Matlabesque, but the package works. In this post I'm going to show how it works.&lt;/p&gt;
&lt;h3 id="Installation"&gt;Installation&lt;a class="anchor-link" href="http://simulkade.com/posts/jfvm-a-finite-volume-tool-for-julia.html#Installation"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;To install the package, you can use &lt;code&gt;Pkg.add("JFVM")&lt;/code&gt; in Julia, or clone the most recent version (recommended). You need to have Julia installed. JFVM relies on &lt;code&gt;PyPlot&lt;/code&gt;, &lt;code&gt;PyCall&lt;/code&gt;, and &lt;code&gt;Mayavi&lt;/code&gt; for visualization. Here's the procedure.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://simulkade.com/posts/jfvm-a-finite-volume-tool-for-julia.html"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>Convection-Diffusion</category><category>Finite-Volume</category><category>JFVM</category><guid>http://simulkade.com/posts/jfvm-a-finite-volume-tool-for-julia.html</guid><pubDate>Fri, 13 Mar 2015 21:05:20 GMT</pubDate></item><item><title>Physical properties in Julia: CoolProp</title><link>http://simulkade.com/posts/Physical properties in Julia: CoolProp.html</link><dc:creator>AAE</dc:creator><description>&lt;div&gt;&lt;p&gt;Recently, I was analyzing my core-flooding experimental data in a Julia notebook, when I realize that I don't have access to a few Matlab functions that I have written (or found elsewhere), which I use regularly for the calculation of physical properties of pure components. For instance, viscosity of water (I know that you know it is 0.001 Pa.s) or density of CO2 or nitrogen at different temperatures and pressures. I know that &lt;a href="http://www.thermo.ruhr-uni-bochum.de/en/prof-w-wagner.html"&gt;Professor Wagner&lt;/a&gt; and his group have developed a few highly-accurate equations of state for industrial applications and I knew that there is a software called &lt;a href="http://ascend4.org/FPROPS"&gt;FPROPS&lt;/a&gt; which is used in &lt;a href="http://ascend4.org/Main_Page"&gt;Ascend IV&lt;/a&gt; package. Searching the name in google showed me a fantastic package called &lt;a href="http://simulkade.com/posts/www.coolprop.org/"&gt;CoolProp&lt;/a&gt; which is being developed mostly in &lt;a href="http://www.labothap.ulg.ac.be/cmsms/"&gt;thermodynamics laboratory&lt;/a&gt; in &lt;a href="http://simulkade.com/posts/www.ulg.ac.be/"&gt;Universite de Liege&lt;/a&gt;. The code is written in C++ but it supports many languages and environments including Matlab and Python. The Python part was interesting to me because I can call it using &lt;a href="https://github.com/stevengj/PyCall.jl"&gt;PyCall&lt;/a&gt; package in Julia. First I installed the &lt;code&gt;CoolProp&lt;/code&gt; package using the instructions &lt;a href="http://www.coolprop.org/HowGetIt.html"&gt;here&lt;/a&gt;. You can do it in Ubuntu 14.04 by running the following code in terminal:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;sudo apt-get install g++
sudo apt-get install cython
sudo apt-get install python-pip
sudo apt-get install python-dev
sudo pip install CoolProp
&lt;/pre&gt;


&lt;p&gt;&lt;a href="http://simulkade.com/posts/Physical%20properties%20in%20Julia:%20CoolProp.html"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>CoolProp</category><category>Julia</category><guid>http://simulkade.com/posts/Physical properties in Julia: CoolProp.html</guid><pubDate>Fri, 24 Oct 2014 23:37:54 GMT</pubDate></item><item><title>Matlab and Julia -- Part II</title><link>http://simulkade.com/posts/Matlab and Julia -- Part II.html</link><dc:creator>AAE</dc:creator><description>&lt;div&gt;&lt;p&gt;In the previous post, I explained how to program the solution procedure of Buckley-Leverett equation in Matlab. Here, I'm trying to move everything to Julia. First, you need to install Julia, and a few important packages. Personally, I prefer the last development version. In Ubuntu-based distributions, you can install it by writing the following lines in the terminal.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;sudo add-apt-repository ppa:staticfloat/julianightlies
sudo add-apt-repository ppa:staticfloat/julia-deps
sudo apt-get update
sudo apt-get install julia
&lt;/pre&gt;


&lt;p&gt;&lt;a href="http://simulkade.com/posts/Matlab%20and%20Julia%20--%20Part%20II.html"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Julia</category><category>Matlab</category><guid>http://simulkade.com/posts/Matlab and Julia -- Part II.html</guid><pubDate>Thu, 02 Oct 2014 20:43:27 GMT</pubDate></item><item><title>Matlab and Julia -- Part I</title><link>http://simulkade.com/posts/Matlab and Julia -- Part I.html</link><dc:creator>AAE</dc:creator><description>&lt;div&gt;&lt;p&gt;I'm very comfortable with Matlab. It does most of the things that I need to do and I've written so many handy scripts and functions in it that I can barely afford to divorce it. I can easily read my data, which are not so many most of the time, analyze them, plot the results, and export the final figure to a format I prefer. However, I'm going to try and detach myself by learning how I can do all the Matlab stuff in Julia. I've already learned how to work with the arrays, write types, and I almost know all the differences. I'll write a post about it later. Here, I' going to try the root finding and optimization in Julia. Let's star by root finding. Let's say I have a function in Matlab. Most of the time, if it's not a long relation, I write it using &lt;code&gt;@&lt;/code&gt;. For instance, consider the fractional flow function:&lt;/p&gt;
&lt;p&gt;$$ f_w = \frac {k_{rw}/\mu_w}{k_{rw}/\mu_w+k_{ro}/\mu_o} $$
&lt;/p&gt;&lt;p&gt;&lt;a href="http://simulkade.com/posts/Matlab%20and%20Julia%20--%20Part%20I.html"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Julia</category><category>Matlab</category><guid>http://simulkade.com/posts/Matlab and Julia -- Part I.html</guid><pubDate>Fri, 26 Sep 2014 08:25:07 GMT</pubDate></item><item><title>A New Start</title><link>http://simulkade.com/posts/the-first-test-post.html</link><dc:creator>AAE</dc:creator><description>&lt;div&gt;&lt;p&gt;I have started two new blogs to achieve two goals. Write more and share my work. My new blogs are
&lt;/p&gt;&lt;p&gt;&lt;a href="http://simulkade.com/posts/the-first-test-post.html"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>general</category><guid>http://simulkade.com/posts/the-first-test-post.html</guid><pubDate>Tue, 20 May 2014 12:06:51 GMT</pubDate></item></channel></rss>